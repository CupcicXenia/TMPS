import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
from datetime import datetime, timedelta
import random

class RecommendationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ú–æ—Å—Ç)"""
    def __init__(self, implementation):
        self.impl = implementation
    
    def get_recommendations(self, destination, days):
        return self.impl.generate_recommendations(destination, days)

class BasicRecommendation:
    """–ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    def generate_recommendations(self, destination, days):
        base_recs = [
            "–û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥—É (10:00-13:00, ‚Ç¨25)",
            "–ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º—É–∑–µ—è (14:00-17:00, ‚Ç¨15)",
            "–£–∂–∏–Ω –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (19:00-21:00, ‚Ç¨40)"
        ]
        return [f"{rec} (–î–µ–Ω—å {i+1})" for i in range(days) for rec in base_recs]

class MLRecommendation:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ò–ò"""
    def generate_recommendations(self, destination, days):
        city_data = {
            "–ü–∞—Ä–∏–∂": [
                "–≠–∫—Å–∫—É—Ä—Å–∏—è –≤ –õ—É–≤—Ä —Å –≥–∏–¥–æ–º (09:00-12:00, ‚Ç¨25)",
                "–û–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ Le Procope (13:00-15:00, ‚Ç¨50)",
                "–í–µ—á–µ—Ä–Ω–∏–π –∫—Ä—É–∏–∑ –ø–æ –°–µ–Ω–µ (19:30-22:00, ‚Ç¨85)",
                "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ú–æ–Ω–º–∞—Ä—Ç—Ä—É (10:00-13:00, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                "–ü–æ—Å–µ—â–µ–Ω–∏–µ –º—É–∑–µ—è –û—Ä—Å–µ (14:00-17:00, ‚Ç¨14)"
            ],
            "–†–∏–º": [
                "–¢—É—Ä –ø–æ –ö–æ–ª–∏–∑–µ—é –∏ –§–æ—Ä—É–º—É (10:00-13:00, ‚Ç¨35)",
                "–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –¥–∂–µ–ª–∞—Ç–æ –≤ Giolitti (14:00-15:00, ‚Ç¨10)",
                "–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –í–∞—Ç–∏–∫–∞–Ω—É (16:00-18:00, ‚Ç¨45)",
                "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –¢—Ä–∞—Å—Ç–µ–≤–µ—Ä–µ (19:00-21:00, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
            ]
        }
        
        recommendations = city_data.get(destination, [
            "–ü–µ—à–µ—Ö–æ–¥–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É (10:00-13:00, ‚Ç¨20)",
            "–ü–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Å—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ (14:00-16:00, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "–£–∂–∏–Ω —Å –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–µ–π (19:00-21:00, ‚Ç¨30-50)"
        ])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        result = []
        for day in range(1, days+1):
            daily_recs = random.sample(recommendations, min(3, len(recommendations)))
            result.extend([f"{rec} (–î–µ–Ω—å {day})" for rec in daily_recs])
        
        return result

class RestaurantRecommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    def get_restaurants(self, destination):
        restaurants = {
            "–ü–∞—Ä–∏–∂": [
                {"name": "Le Jules Verne", "type": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "price": "‚Ç¨120-250", "rating": "4.8"},
                {"name": "Bistrot Paul Bert", "type": "–ë–∏—Å—Ç—Ä–æ", "price": "‚Ç¨30-60", "rating": "4.6"},
                {"name": "L'Ambroisie", "type": "–ú–∏—à–ª–µ–Ω", "price": "‚Ç¨300+", "rating": "4.9"}
            ],
            "–†–∏–º": [
                {"name": "Roscioli", "type": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "price": "‚Ç¨40-80", "rating": "4.7"},
                {"name": "La Pergola", "type": "–ú–∏—à–ª–µ–Ω", "price": "‚Ç¨200+", "rating": "4.9"}
            ]
        }
        return restaurants.get(destination, [
            {"name": "–ú–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "type": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è", "price": "‚Ç¨20-50", "rating": "4.0+"}
        ])

class TravelComponent:
    """–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–ö–æ–º–ø–æ–Ω–æ–≤—â–∏–∫)"""
    def __init__(self, name):
        self.name = name
    
    def display(self, tree, parent=""):
        pass
    
    def get_cost(self):
        return 0
    
    def to_dict(self):
        return {"name": self.name}

class Activity(TravelComponent):
    """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    def __init__(self, name, cost=0, time="", notes=""):
        super().__init__(name)
        self.cost = cost
        self.time = time
        self.notes = notes
    
    def display(self, tree, parent=""):
        tree.insert(parent, "end", text=f"‚è∞ {self.name}", 
                   values=(f"‚Ç¨{self.cost}", f"{self.time} | {self.notes}"))
    
    def get_cost(self):
        return self.cost
    
    def to_dict(self):
        data = super().to_dict()
        data.update({
            "type": "activity",
            "cost": self.cost,
            "time": self.time,
            "notes": self.notes
        })
        return data

class DayPlan(TravelComponent):
    """–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"""
    def __init__(self, name, date):
        super().__init__(name)
        self.date = date
        self.activities = []
    
    def add(self, component):
        self.activities.append(component)
    
    def display(self, tree, parent=""):
        day_node = tree.insert(parent, "end", text=f"üìÖ {self.name} ({self.date})", 
                             values=("", ""), open=True)
        total = 0
        for activity in self.activities:
            activity.display(tree, day_node)
            total += activity.get_cost()
        tree.item(day_node, values=(f"‚Ç¨{total}", ""))
    
    def get_cost(self):
        return sum(activity.get_cost() for activity in self.activities)
    
    def to_dict(self):
        data = super().to_dict()
        data.update({
            "type": "day",
            "date": self.date,
            "activities": [act.to_dict() for act in self.activities]
        })
        return data

class TripPlan(TravelComponent):
    """–ü–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏"""
    def __init__(self, destination):
        super().__init__(destination)
        self.days = []
        self.hotel = None
        self.flight = None
    
    def add_day(self, day):
        self.days.append(day)
    
    def set_hotel(self, hotel):
        self.hotel = hotel
    
    def set_flight(self, flight):
        self.flight = flight
    
    def display(self, tree):
        tree.delete(*tree.get_children())
        trip_node = tree.insert("", "end", text=f"‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∞ –≤ {self.name}", 
                              values=("", ""), open=True)
        
        if self.flight:
            flight_text = f"{self.flight['airline']} ({self.flight['time']})"
            tree.insert(trip_node, "end", text=f"‚úàÔ∏è –ü–µ—Ä–µ–ª–µ—Ç: {flight_text}",
                        values=(f"‚Ç¨{self.flight['price']}", ""))
        
        if self.hotel:
            hotel_text = f"{self.hotel['name']} ‚òÖ{self.hotel['rating']}"
            tree.insert(trip_node, "end", text=f"üè® –û—Ç–µ–ª—å: {hotel_text}",
                        values=(f"‚Ç¨{self.hotel['price']}", self.hotel['address']))
        
        total = (self.flight['price'] if self.flight else 0) + \
               (self.hotel['price'] if self.hotel else 0)
        
        for day in self.days:
            day.display(tree, trip_node)
            total += day.get_cost()
        
        tree.insert(trip_node, "end", text="üí∞ –ò—Ç–æ–≥–æ:", 
                   values=(f"‚Ç¨{total}", ""), tags=("total",))
        tree.tag_configure("total", background="#f0f0f0", font=("Arial", 9, "bold"))
    
    def get_cost(self):
        return sum(day.get_cost() for day in self.days) + \
              (self.flight['price'] if self.flight else 0) + \
              (self.hotel['price'] if self.hotel else 0)
    
    def to_dict(self):
        return {
            "destination": self.name,
            "flight": self.flight,
            "hotel": self.hotel,
            "days": [day.to_dict() for day in self.days],
            "total_cost": self.get_cost()
        }

class TravelPlannerFacade:
    """–§–∞—Å–∞–¥ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    def __init__(self):
        self.booking_adapter = BookingAdapter()
        self.flight_adapter = FlightAdapter()
        self.recommendation_system = RecommendationSystem(MLRecommendation())
        self.restaurant_recommendation = RestaurantRecommendation()
    
    def plan_trip(self, destination, start_date, days, origin_city="–ú–æ—Å–∫–≤–∞"):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        dates = [start_date + timedelta(days=i) for i in range(days)]
        hotels = self.booking_adapter.search_hotels(destination, dates)
        flights = self.flight_adapter.search_flights(origin_city, destination, start_date)
        attractions = self.recommendation_system.get_recommendations(destination, days)
        restaurants = self.restaurant_recommendation.get_restaurants(destination)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
        trip = TripPlan(destination)
        trip.set_flight(flights[0])
        trip.set_hotel(hotels[1])
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for i in range(days):
            day = DayPlan(f"–î–µ–Ω—å {i+1}", dates[i].strftime("%d.%m.%Y"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if i*3 < len(attractions):
                act = self._parse_activity(attractions[i*3])
                if act: day.add(act)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ–¥
            if restaurants and i < len(restaurants):
                rest = restaurants[i]
                day.add(Activity(
                    f"–û–±–µ–¥ –≤ {rest['name']} ({rest['type']})",
                    self._parse_price(rest['price']),
                    "13:00-15:00",
                    f"–†–µ–π—Ç–∏–Ω–≥: {rest['rating']}"
                ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∂–∏–Ω
            if i*3+2 < len(attractions):
                act = self._parse_activity(attractions[i*3+2])
                if act: day.add(act)
            
            trip.add_day(day)
        
        return trip
    
    def _parse_activity(self, activity_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç Activity"""
        try:
            parts = activity_str.split("(")
            name = parts[0].strip()
            details = parts[1].split(")")[0]
            
            time, *cost_parts = details.split(",")
            time = time.strip()
            cost = 0
            
            if cost_parts:
                cost_str = cost_parts[0].strip()
                if "‚Ç¨" in cost_str:
                    cost = int(cost_str.replace("‚Ç¨", "").strip())
            
            return Activity(name, cost, time)
        except:
            return None
    
    def _parse_price(self, price_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ"""
        try:
            return int(price_str.replace("‚Ç¨", "").replace("+", "").strip())
        except:
            return 0

class BookingAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Booking.com"""
    def search_hotels(self, destination, dates):
        hotels = [
            {
                "name": "Budget Hotel",
                "price": 50,
                "rating": 3.5,
                "address": "Near city center"
            },
            {
                "name": "Comfort Hotel",
                "price": 120,
                "rating": 4.2,
                "address": "City center"
            },
            {
                "name": "Luxury Resort",
                "price": 300,
                "rating": 4.8,
                "address": "Waterfront"
            }
        ]
        return hotels

class FlightAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
    def search_flights(self, origin, destination, date):
        flights = [
            {
                "airline": "AirFrance",
                "price": 250,
                "time": "10:00-12:30",
                "class": "Economy"
            },
            {
                "airline": "Lufthansa",
                "price": 400,
                "time": "15:00-17:45",
                "class": "Premium"
            },
            {
                "airline": "Emirates",
                "price": 800,
                "time": "08:00-10:15",
                "class": "Business"
            }
        ]
        return flights

class TravelPlannerApp(tk.Tk):
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self):
        super().__init__()
        self.title("–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")
        self.geometry("1000x750")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞—Å–∞–¥–∞
        self.planner = TravelPlannerFacade()
        self.current_trip = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.create_widgets()
    
    def create_widgets(self):
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure("TFrame", background="#f5f5f5")
        style.configure("TLabel", background="#f5f5f5")
        style.configure("TButton", padding=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(control_frame, text="–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:").grid(row=0, column=0, sticky=tk.W)
        self.destination_entry = ttk.Entry(control_frame, width=20)
        self.destination_entry.grid(row=0, column=1, padx=5)
        
        ttk.Label(control_frame, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:").grid(row=0, column=2, sticky=tk.W)
        self.start_date_entry = ttk.Entry(control_frame, width=10)
        self.start_date_entry.grid(row=0, column=3, padx=5)
        self.start_date_entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
        
        ttk.Label(control_frame, text="–î–Ω–µ–π:").grid(row=0, column=4, sticky=tk.W)
        self.days_spinbox = ttk.Spinbox(control_frame, from_=1, to=30, width=5)
        self.days_spinbox.grid(row=0, column=5, padx=5)
        self.days_spinbox.set(3)
        
        ttk.Button(control_frame, text="–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", 
                  command=self.create_plan).grid(row=0, column=6, padx=10)
        
        # –î–µ—Ä–µ–≤–æ –º–∞—Ä—à—Ä—É—Ç–∞
        tree_frame = ttk.Frame(main_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        self.tree = ttk.Treeview(tree_frame, columns=("cost", "details"), 
                                displaycolumns=("cost", "details"))
        self.tree.heading("#0", text="–ú–∞—Ä—à—Ä—É—Ç")
        self.tree.heading("cost", text="–°—Ç–æ–∏–º–æ—Å—Ç—å")
        self.tree.heading("details", text="–î–µ—Ç–∞–ª–∏")
        self.tree.column("cost", width=100, anchor=tk.E)
        self.tree.column("details", width=300)
        
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        hsb = ttk.Scrollbar(tree_frame, orient="horizontal", command=self.tree.xview)
        self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        self.tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏
        details_frame = ttk.LabelFrame(main_frame, text="–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏")
        details_frame.pack(fill=tk.BOTH, pady=(10, 0))
        
        self.details_text = scrolledtext.ScrolledText(details_frame, height=10, wrap=tk.WORD)
        self.details_text.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ JSON", 
                  command=self.save_to_json).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", 
                  command=self.show_trip_details).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–µ–∑–¥–∫–µ", 
                  command=self.show_travel_tips).pack(side=tk.LEFT, padx=5)
    
    def create_plan(self):
        try:
            destination = self.destination_entry.get()
            if not destination:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                return
            
            start_date = datetime.strptime(self.start_date_entry.get(), "%d.%m.%Y")
            days = int(self.days_spinbox.get())
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥
            self.current_trip = self.planner.plan_trip(destination, start_date, days)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–ª–∞–Ω
            self.display_trip()
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
    
    def display_trip(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        if not self.current_trip:
            return
        
        self.tree.delete(*self.tree.get_children())
        self.current_trip.display(self.tree)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        self.update_trip_details()
    
    def update_trip_details(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
        if not self.current_trip:
            return
        
        details = f"‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∞ –≤ {self.current_trip.name}\n\n"
        
        if self.current_trip.flight:
            details += f"–ü–µ—Ä–µ–ª–µ—Ç: {self.current_trip.flight['airline']} ({self.current_trip.flight['time']})\n"
            details += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{self.current_trip.flight['price']}\n\n"
        
        if self.current_trip.hotel:
            details += f"–û—Ç–µ–ª—å: {self.current_trip.hotel['name']}\n"
            details += f"–†–µ–π—Ç–∏–Ω–≥: ‚òÖ{self.current_trip.hotel['rating']}\n"
            details += f"–ê–¥—Ä–µ—Å: {self.current_trip.hotel['address']}\n"
            details += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{self.current_trip.hotel['price']}\n\n"
        
        details += "–ú–∞—Ä—à—Ä—É—Ç:\n"
        for day in self.current_trip.days:
            details += f"\n{day.name} ({day.date}):\n"
            for activity in day.activities:
                details += f"- {activity.name} ({activity.time}), —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{activity.cost}\n"
        
        details += f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: ‚Ç¨{self.current_trip.get_cost()}"
        
        self.details_text.delete(1.0, tk.END)
        self.details_text.insert(tk.END, details)
    
    def save_to_json(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏ –≤ JSON-—Ñ–∞–π–ª"""
        if not self.current_trip:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏")
            return
        
        trip_data = self.current_trip.to_dict()
        filename = f"trip_to_{trip_data['destination']}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(trip_data, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–ü–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def show_trip_details(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        if not self.current_trip:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–µ–∑–¥–∫–∏")
            return
        
        details = self.details_text.get(1.0, tk.END)
        messagebox.showinfo("–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏", details)
    
    def show_travel_tips(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        destination = self.destination_entry.get()
        if not destination:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        tips = {
            "–ü–∞—Ä–∏–∂": [
                "–ö—É–ø–∏—Ç–µ –º—É–∑–µ–π–Ω—É—é –∫–∞—Ä—Ç—É Paris Museum Pass –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç—Ä–æ - —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –≥–æ—Ä–æ–¥–µ",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—Ä—É–∞—Å—Å–∞–Ω—ã –≤ –º–µ—Å—Ç–Ω—ã—Ö –ø–µ–∫–∞—Ä–Ω—è—Ö (–±—É–ª–∞–Ω–∂–µ—Ä–∏)"
            ],
            "–†–∏–º": [
                "–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –±–∏–ª–µ—Ç—ã –≤ –ö–æ–ª–∏–∑–µ–π –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–µ–π",
                "–ü–µ–π—Ç–µ –≤–æ–¥—É –∏–∑ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ - –æ–Ω–∞ —á–∏—Å—Ç–∞—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
                "–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ä—è–¥–æ–º —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ - –æ–Ω–∏ –¥–æ—Ä–æ–≥–∏–µ –∏ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–µ"
            ]
        }.get(destination, [
            "–ò–∑—É—á–∏—Ç–µ –º–µ—Å—Ç–Ω—ã–µ –æ–±—ã—á–∞–∏ –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π",
            "–°–∫–∞—á–∞–π—Ç–µ –æ—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã –≥–æ—Ä–æ–¥–∞",
            "–ò–º–µ–π—Ç–µ –ø—Ä–∏ —Å–µ–±–µ –Ω–∞–ª–∏—á–Ω—ã–µ - –Ω–µ –≤–µ–∑–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–∞—Ä—Ç—ã"
        ])
        
        message = f"–°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ {destination}:\n\n" + "\n‚Ä¢ ".join(tips)
        messagebox.showinfo("–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–µ–∑–¥–∫–µ", message)

if __name__ == "__main__":
    app = TravelPlannerApp()
    app.mainloop()